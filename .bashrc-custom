# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

export MAKEFLAGS=j$(cat /proc/cpuinfo | grep "processor\s*:" | wc -l)

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH:${HOME}/.local/bin:$HOME/petalinux-2019.2/tools/xsct/bin"

PYTHON_VERSION_OVERRIDE=python3.6

if [ "x$PYTHON_VERSION_OVERRIDE" == "x" ];
then
   PYTHON_VERSION_OVERRIDE=python3
fi

export PYTHON_LOCAL_MODINST=$($PYTHON_VERSION_OVERRIDE --version | tr -d ' ' | tr 'P' 'p' | awk -F. '{print $1"."$2}')

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

if [ -f $HOME/.local/lib/${PYTHON_LOCAL_MODINST}/site-packages/powerline/bindings/bash/powerline.sh ]; 
then
    $HOME/.local/bin/powerline-daemon -q
    POWERLINE_BASH_CONTINUATION=1
    POWERLINE_BASH_SELECT=1
    source $HOME/.local/lib/${PYTHON_LOCAL_MODINST}/site-packages/powerline/bindings/bash/powerline.sh
fi

if [ -f $HOME/.local/lib/${PYTHON_LOCAL_MODINST}/site-packages/powerline/bindings/bash/powerline.sh ]; 
then
    $HOME/.local/bin/powerline-daemon -q
    POWERLINE_BASH_CONTINUATION=1
    POWERLINE_BASH_SELECT=1
    source $HOME/.local/lib/${PYTHON_LOCAL_MODINST}/site-packages/powerline/bindings/bash/powerline.sh
fi

cd_func ()
{
   local x2 the_new_dir adir index
   local -i cnt


   if [[ $1 ==  "--" ]]; then
      dirs -v
      return 0
   fi


   the_new_dir=$1
   [[ -z $1 ]] && the_new_dir=$HOME


   if [[ ${the_new_dir:0:1} == '-' ]]; then
      #
      # Extract dir N from dirs
      index=${the_new_dir:1}
      [[ -z $index ]] && index=1
      adir=$(dirs +$index)
      [[ -z $adir ]] && return 1
      the_new_dir=$adir
   fi


   #
   # '~' has to be substituted by ${HOME}
   [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"


   #
   # Now change to the new dir and add to the top of the
   # stack
   pushd "${the_new_dir}" > /dev/null
   [[ $? -ne 0 ]] && return 1
   the_new_dir=$(pwd)


   #
   # Trim down everything beyond 11th entry
   popd -n +11 2>/dev/null 1>/dev/null


   #
   # Remove any other occurence of this dir,
   # skipping the top of the stack
   for ((cnt=1; cnt <= 10; cnt++)); do
      x2=$(dirs +${cnt} 2>/dev/null)
      [[ $? -ne 0 ]] && return 0
      [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
      if [[ "${x2}" == "${the_new_dir}" ]]; then
         popd -n +$cnt 2>/dev/null 1>/dev/null
         cnt=cnt-1
      fi
   done


   return 0
}

alias cd=cd_func

ssh-add -l &> /dev/null
if [ "$?" == 2 ]; then
   # No currently accessable agent.
   test -r ~/.ssh/.ssh-agent-info && eval "$(cat ~/.ssh/.ssh-agent-info)" > /dev/null

   ssh-add -l &> /dev/null
   if [ "$?" == 2 ]; then
      ssh-agent > ~/.ssh/.ssh-agent-info
      eval $(< ~/.ssh/.ssh-agent-info)
   fi
fi

# Now having got an ssh agent running safely, load the identities.
ssh-add -l &> /dev/null
if [ "$?" == 1 ]; then
   # No identities, add some.
   ssh-add $(< ~/.ssh/add-keys)
else
   if [ "$?" == 2 ]; then
      echo "Session initialisation: Couldn't find running ssh-agent!"
   fi
fi

